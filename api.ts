/* tslint:disable */
/* eslint-disable */
/**
 * Quasar Nest example
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'companyId': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'name': string;
    /**
     * 
     * @type {Array<Person>}
     * @memberof Company
     */
    'people'?: Array<Person>;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface CompanyQueryResponseDto
 */
export interface CompanyQueryResponseDto {
    /**
     * 
     * @type {Array<Company>}
     * @memberof CompanyQueryResponseDto
     */
    'data': Array<Company>;
    /**
     * 
     * @type {number}
     * @memberof CompanyQueryResponseDto
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface ConnectCompanyDto
 */
export interface ConnectCompanyDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectCompanyDto
     */
    'companyId': string;
}
/**
 * 
 * @export
 * @interface ConnectJobDto
 */
export interface ConnectJobDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectJobDto
     */
    'jobId': string;
}
/**
 * 
 * @export
 * @interface ConnectPersonDto
 */
export interface ConnectPersonDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectPersonDto
     */
    'personId': string;
}
/**
 * 
 * @export
 * @interface ConnectRoleDto
 */
export interface ConnectRoleDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectRoleDto
     */
    'roleId': string;
}
/**
 * 
 * @export
 * @interface ConnectSessionDto
 */
export interface ConnectSessionDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectSessionDto
     */
    'sessionId': string;
}
/**
 * 
 * @export
 * @interface ConnectUserDto
 */
export interface ConnectUserDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectUserDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ConnectUserRoleDto
 */
export interface ConnectUserRoleDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectUserRoleDto
     */
    'userRoleId': string;
}
/**
 * 
 * @export
 * @interface CreateCompanyDto
 */
export interface CreateCompanyDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'companyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'name': string;
    /**
     * 
     * @type {CreateCompanyPeopleRelationInputDto}
     * @memberof CreateCompanyDto
     */
    'people'?: CreateCompanyPeopleRelationInputDto;
}
/**
 * 
 * @export
 * @interface CreateCompanyPeopleRelationInputDto
 */
export interface CreateCompanyPeopleRelationInputDto {
    /**
     * 
     * @type {Array<ConnectPersonDto>}
     * @memberof CreateCompanyPeopleRelationInputDto
     */
    'connect': Array<ConnectPersonDto>;
}
/**
 * 
 * @export
 * @interface CreateJobDto
 */
export interface CreateJobDto {
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    'jobId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    'name': string;
    /**
     * 
     * @type {CreateJobPeopleRelationInputDto}
     * @memberof CreateJobDto
     */
    'people'?: CreateJobPeopleRelationInputDto;
}
/**
 * 
 * @export
 * @interface CreateJobPeopleRelationInputDto
 */
export interface CreateJobPeopleRelationInputDto {
    /**
     * 
     * @type {Array<ConnectPersonDto>}
     * @memberof CreateJobPeopleRelationInputDto
     */
    'connect': Array<ConnectPersonDto>;
}
/**
 * 
 * @export
 * @interface CreatePersonCompanyRelationInputDto
 */
export interface CreatePersonCompanyRelationInputDto {
    /**
     * 
     * @type {ConnectCompanyDto}
     * @memberof CreatePersonCompanyRelationInputDto
     */
    'connect': ConnectCompanyDto;
}
/**
 * 
 * @export
 * @interface CreatePersonDto
 */
export interface CreatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'personId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'avatar': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'email': string;
    /**
     * 
     * @type {CreatePersonJobRelationInputDto}
     * @memberof CreatePersonDto
     */
    'job': CreatePersonJobRelationInputDto;
    /**
     * 
     * @type {CreatePersonCompanyRelationInputDto}
     * @memberof CreatePersonDto
     */
    'company': CreatePersonCompanyRelationInputDto;
}
/**
 * 
 * @export
 * @interface CreatePersonJobRelationInputDto
 */
export interface CreatePersonJobRelationInputDto {
    /**
     * 
     * @type {ConnectJobDto}
     * @memberof CreatePersonJobRelationInputDto
     */
    'connect': ConnectJobDto;
}
/**
 * 
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleDto
     */
    'roleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoleDto
     */
    'name': string;
    /**
     * 
     * @type {CreateRoleUsersRelationInputDto}
     * @memberof CreateRoleDto
     */
    'users'?: CreateRoleUsersRelationInputDto;
}
/**
 * 
 * @export
 * @interface CreateRoleUsersRelationInputDto
 */
export interface CreateRoleUsersRelationInputDto {
    /**
     * 
     * @type {Array<ConnectUserRoleDto>}
     * @memberof CreateRoleUsersRelationInputDto
     */
    'connect': Array<ConnectUserRoleDto>;
}
/**
 * 
 * @export
 * @interface CreateSessionDto
 */
export interface CreateSessionDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSessionDto
     */
    'sessionId'?: string;
    /**
     * 
     * @type {CreateSessionUserRelationInputDto}
     * @memberof CreateSessionDto
     */
    'user': CreateSessionUserRelationInputDto;
}
/**
 * 
 * @export
 * @interface CreateSessionUserRelationInputDto
 */
export interface CreateSessionUserRelationInputDto {
    /**
     * 
     * @type {ConnectUserDto}
     * @memberof CreateSessionUserRelationInputDto
     */
    'connect': ConnectUserDto;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {object}
     * @memberof CreateUserDto
     */
    'password': object;
    /**
     * 
     * @type {object}
     * @memberof CreateUserDto
     */
    'salt': object;
    /**
     * 
     * @type {CreateUserRolesRelationInputDto}
     * @memberof CreateUserDto
     */
    'roles'?: CreateUserRolesRelationInputDto;
    /**
     * 
     * @type {CreateUserSessionsRelationInputDto}
     * @memberof CreateUserDto
     */
    'sessions'?: CreateUserSessionsRelationInputDto;
}
/**
 * 
 * @export
 * @interface CreateUserRoleDto
 */
export interface CreateUserRoleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRoleDto
     */
    'userRoleId'?: string;
    /**
     * 
     * @type {CreateUserRoleUserRelationInputDto}
     * @memberof CreateUserRoleDto
     */
    'user': CreateUserRoleUserRelationInputDto;
    /**
     * 
     * @type {CreateUserRoleRoleRelationInputDto}
     * @memberof CreateUserRoleDto
     */
    'role': CreateUserRoleRoleRelationInputDto;
}
/**
 * 
 * @export
 * @interface CreateUserRoleRoleRelationInputDto
 */
export interface CreateUserRoleRoleRelationInputDto {
    /**
     * 
     * @type {ConnectRoleDto}
     * @memberof CreateUserRoleRoleRelationInputDto
     */
    'connect': ConnectRoleDto;
}
/**
 * 
 * @export
 * @interface CreateUserRoleUserRelationInputDto
 */
export interface CreateUserRoleUserRelationInputDto {
    /**
     * 
     * @type {ConnectUserDto}
     * @memberof CreateUserRoleUserRelationInputDto
     */
    'connect': ConnectUserDto;
}
/**
 * 
 * @export
 * @interface CreateUserRolesRelationInputDto
 */
export interface CreateUserRolesRelationInputDto {
    /**
     * 
     * @type {Array<ConnectUserRoleDto>}
     * @memberof CreateUserRolesRelationInputDto
     */
    'connect': Array<ConnectUserRoleDto>;
}
/**
 * 
 * @export
 * @interface CreateUserSessionsRelationInputDto
 */
export interface CreateUserSessionsRelationInputDto {
    /**
     * 
     * @type {Array<ConnectSessionDto>}
     * @memberof CreateUserSessionsRelationInputDto
     */
    'connect': Array<ConnectSessionDto>;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'jobId': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'name': string;
    /**
     * 
     * @type {Array<Person>}
     * @memberof Job
     */
    'people'?: Array<Person>;
    /**
     * 
     * @type {boolean}
     * @memberof Job
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface JobQueryResponseDto
 */
export interface JobQueryResponseDto {
    /**
     * 
     * @type {Array<Job>}
     * @memberof JobQueryResponseDto
     */
    'data': Array<Job>;
    /**
     * 
     * @type {number}
     * @memberof JobQueryResponseDto
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface LoginAuthDto
 */
export interface LoginAuthDto {
    /**
     * 
     * @type {string}
     * @memberof LoginAuthDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginAuthDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginAuthResponseDto
 */
export interface LoginAuthResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginAuthResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof LoginAuthResponseDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface PayloadAuthEntity
 */
export interface PayloadAuthEntity {
    /**
     * 
     * @type {string}
     * @memberof PayloadAuthEntity
     */
    'jti': string;
    /**
     * 
     * @type {string}
     * @memberof PayloadAuthEntity
     */
    'sub': string;
    /**
     * 
     * @type {string}
     * @memberof PayloadAuthEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PayloadAuthEntity
     */
    'email': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PayloadAuthEntity
     */
    'roles': Array<string>;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'personId': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'avatar': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'jobId': string;
    /**
     * 
     * @type {Job}
     * @memberof Person
     */
    'job'?: Job;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'companyId': string;
    /**
     * 
     * @type {Company}
     * @memberof Person
     */
    'company'?: Company;
    /**
     * 
     * @type {boolean}
     * @memberof Person
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface PersonQueryResponseDto
 */
export interface PersonQueryResponseDto {
    /**
     * 
     * @type {Array<Person>}
     * @memberof PersonQueryResponseDto
     */
    'data': Array<Person>;
    /**
     * 
     * @type {number}
     * @memberof PersonQueryResponseDto
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface RefreshAuthResponseDto
 */
export interface RefreshAuthResponseDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshAuthResponseDto
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'roleId': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof Role
     */
    'users'?: Array<UserRole>;
}
/**
 * 
 * @export
 * @interface RoleQueryResponseDto
 */
export interface RoleQueryResponseDto {
    /**
     * 
     * @type {Array<Role>}
     * @memberof RoleQueryResponseDto
     */
    'data': Array<Role>;
    /**
     * 
     * @type {number}
     * @memberof RoleQueryResponseDto
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'sessionId': string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'userId': string;
    /**
     * 
     * @type {User}
     * @memberof Session
     */
    'user'?: User;
    /**
     * 
     * @type {boolean}
     * @memberof Session
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface SessionQueryResponseDto
 */
export interface SessionQueryResponseDto {
    /**
     * 
     * @type {Array<Session>}
     * @memberof SessionQueryResponseDto
     */
    'data': Array<Session>;
    /**
     * 
     * @type {number}
     * @memberof SessionQueryResponseDto
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface UpdateCompanyDto
 */
export interface UpdateCompanyDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'name'?: string;
    /**
     * 
     * @type {UpdateCompanyPeopleRelationInputDto}
     * @memberof UpdateCompanyDto
     */
    'people'?: UpdateCompanyPeopleRelationInputDto;
}
/**
 * 
 * @export
 * @interface UpdateCompanyPeopleRelationInputDto
 */
export interface UpdateCompanyPeopleRelationInputDto {
    /**
     * 
     * @type {Array<ConnectPersonDto>}
     * @memberof UpdateCompanyPeopleRelationInputDto
     */
    'connect': Array<ConnectPersonDto>;
}
/**
 * 
 * @export
 * @interface UpdateJobDto
 */
export interface UpdateJobDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateJobDto
     */
    'name'?: string;
    /**
     * 
     * @type {UpdateJobPeopleRelationInputDto}
     * @memberof UpdateJobDto
     */
    'people'?: UpdateJobPeopleRelationInputDto;
}
/**
 * 
 * @export
 * @interface UpdateJobPeopleRelationInputDto
 */
export interface UpdateJobPeopleRelationInputDto {
    /**
     * 
     * @type {Array<ConnectPersonDto>}
     * @memberof UpdateJobPeopleRelationInputDto
     */
    'connect': Array<ConnectPersonDto>;
}
/**
 * 
 * @export
 * @interface UpdatePersonCompanyRelationInputDto
 */
export interface UpdatePersonCompanyRelationInputDto {
    /**
     * 
     * @type {ConnectCompanyDto}
     * @memberof UpdatePersonCompanyRelationInputDto
     */
    'connect': ConnectCompanyDto;
}
/**
 * 
 * @export
 * @interface UpdatePersonDto
 */
export interface UpdatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'email'?: string;
    /**
     * 
     * @type {UpdatePersonJobRelationInputDto}
     * @memberof UpdatePersonDto
     */
    'job'?: UpdatePersonJobRelationInputDto;
    /**
     * 
     * @type {UpdatePersonCompanyRelationInputDto}
     * @memberof UpdatePersonDto
     */
    'company'?: UpdatePersonCompanyRelationInputDto;
}
/**
 * 
 * @export
 * @interface UpdatePersonJobRelationInputDto
 */
export interface UpdatePersonJobRelationInputDto {
    /**
     * 
     * @type {ConnectJobDto}
     * @memberof UpdatePersonJobRelationInputDto
     */
    'connect': ConnectJobDto;
}
/**
 * 
 * @export
 * @interface UpdateRoleDto
 */
export interface UpdateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleDto
     */
    'name'?: string;
    /**
     * 
     * @type {UpdateRoleUsersRelationInputDto}
     * @memberof UpdateRoleDto
     */
    'users'?: UpdateRoleUsersRelationInputDto;
}
/**
 * 
 * @export
 * @interface UpdateRoleUsersRelationInputDto
 */
export interface UpdateRoleUsersRelationInputDto {
    /**
     * 
     * @type {Array<ConnectUserRoleDto>}
     * @memberof UpdateRoleUsersRelationInputDto
     */
    'connect': Array<ConnectUserRoleDto>;
}
/**
 * 
 * @export
 * @interface UpdateSessionDto
 */
export interface UpdateSessionDto {
    /**
     * 
     * @type {UpdateSessionUserRelationInputDto}
     * @memberof UpdateSessionDto
     */
    'user'?: UpdateSessionUserRelationInputDto;
}
/**
 * 
 * @export
 * @interface UpdateSessionUserRelationInputDto
 */
export interface UpdateSessionUserRelationInputDto {
    /**
     * 
     * @type {ConnectUserDto}
     * @memberof UpdateSessionUserRelationInputDto
     */
    'connect': ConnectUserDto;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {object}
     * @memberof UpdateUserDto
     */
    'password'?: object;
    /**
     * 
     * @type {object}
     * @memberof UpdateUserDto
     */
    'salt'?: object;
    /**
     * 
     * @type {UpdateUserRolesRelationInputDto}
     * @memberof UpdateUserDto
     */
    'roles'?: UpdateUserRolesRelationInputDto;
    /**
     * 
     * @type {UpdateUserSessionsRelationInputDto}
     * @memberof UpdateUserDto
     */
    'sessions'?: UpdateUserSessionsRelationInputDto;
}
/**
 * 
 * @export
 * @interface UpdateUserRoleDto
 */
export interface UpdateUserRoleDto {
    /**
     * 
     * @type {UpdateUserRoleUserRelationInputDto}
     * @memberof UpdateUserRoleDto
     */
    'user'?: UpdateUserRoleUserRelationInputDto;
    /**
     * 
     * @type {UpdateUserRoleRoleRelationInputDto}
     * @memberof UpdateUserRoleDto
     */
    'role'?: UpdateUserRoleRoleRelationInputDto;
}
/**
 * 
 * @export
 * @interface UpdateUserRoleRoleRelationInputDto
 */
export interface UpdateUserRoleRoleRelationInputDto {
    /**
     * 
     * @type {ConnectRoleDto}
     * @memberof UpdateUserRoleRoleRelationInputDto
     */
    'connect': ConnectRoleDto;
}
/**
 * 
 * @export
 * @interface UpdateUserRoleUserRelationInputDto
 */
export interface UpdateUserRoleUserRelationInputDto {
    /**
     * 
     * @type {ConnectUserDto}
     * @memberof UpdateUserRoleUserRelationInputDto
     */
    'connect': ConnectUserDto;
}
/**
 * 
 * @export
 * @interface UpdateUserRolesRelationInputDto
 */
export interface UpdateUserRolesRelationInputDto {
    /**
     * 
     * @type {Array<ConnectUserRoleDto>}
     * @memberof UpdateUserRolesRelationInputDto
     */
    'connect': Array<ConnectUserRoleDto>;
}
/**
 * 
 * @export
 * @interface UpdateUserSessionsRelationInputDto
 */
export interface UpdateUserSessionsRelationInputDto {
    /**
     * 
     * @type {Array<ConnectSessionDto>}
     * @memberof UpdateUserSessionsRelationInputDto
     */
    'connect': Array<ConnectSessionDto>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {object}
     * @memberof User
     */
    'password': object;
    /**
     * 
     * @type {object}
     * @memberof User
     */
    'salt': object;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof User
     */
    'roles'?: Array<UserRole>;
    /**
     * 
     * @type {Array<Session>}
     * @memberof User
     */
    'sessions'?: Array<Session>;
}
/**
 * 
 * @export
 * @interface UserQueryResponseDto
 */
export interface UserQueryResponseDto {
    /**
     * 
     * @type {Array<User>}
     * @memberof UserQueryResponseDto
     */
    'data': Array<User>;
    /**
     * 
     * @type {number}
     * @memberof UserQueryResponseDto
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface UserRole
 */
export interface UserRole {
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'userRoleId': string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'userId': string;
    /**
     * 
     * @type {User}
     * @memberof UserRole
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'roleId': string;
    /**
     * 
     * @type {Role}
     * @memberof UserRole
     */
    'role'?: Role;
    /**
     * 
     * @type {boolean}
     * @memberof UserRole
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface UserRoleQueryResponseDto
 */
export interface UserRoleQueryResponseDto {
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof UserRoleQueryResponseDto
     */
    'data': Array<UserRole>;
    /**
     * 
     * @type {number}
     * @memberof UserRoleQueryResponseDto
     */
    'count'?: number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (flow: 'server' | 'client', loginAuthDto: LoginAuthDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('login', 'flow', flow)
            // verify required parameter 'loginAuthDto' is not null or undefined
            assertParamExists('login', 'loginAuthDto', loginAuthDto)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (flow: 'server' | 'client', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('logout', 'flow', flow)
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (flow: 'server' | 'client', refreshToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('refresh', 'flow', flow)
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }

            if (refreshToken !== undefined && refreshToken !== null) {
                localVarHeaderParameter['RefreshToken'] = String(refreshToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(flow: 'server' | 'client', loginAuthDto: LoginAuthDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginAuthResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(flow, loginAuthDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(flow: 'server' | 'client', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(flow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(flow: 'server' | 'client', refreshToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAuthResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(flow, refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(flow: 'server' | 'client', loginAuthDto: LoginAuthDto, options?: any): AxiosPromise<LoginAuthResponseDto> {
            return localVarFp.login(flow, loginAuthDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(flow: 'server' | 'client', options?: any): AxiosPromise<void> {
            return localVarFp.logout(flow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'server' | 'client'} flow 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(flow: 'server' | 'client', refreshToken?: string, options?: any): AxiosPromise<RefreshAuthResponseDto> {
            return localVarFp.refresh(flow, refreshToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {'server' | 'client'} flow 
     * @param {LoginAuthDto} loginAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(flow: 'server' | 'client', loginAuthDto: LoginAuthDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(flow, loginAuthDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'server' | 'client'} flow 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(flow: 'server' | 'client', options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).logout(flow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'server' | 'client'} flow 
     * @param {string} [refreshToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refresh(flow: 'server' | 'client', refreshToken?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).refresh(flow, refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCompanyDto} createCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createCompanyDto: CreateCompanyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCompanyDto' is not null or undefined
            assertParamExists('create', 'createCompanyDto', createCompanyDto)
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCompanyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: string, select?: any, include?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCompanyDto} updateCompanyDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateCompanyDto: UpdateCompanyDto, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateCompanyDto' is not null or undefined
            assertParamExists('update', 'updateCompanyDto', updateCompanyDto)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompanyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCompanyDto} createCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createCompanyDto: CreateCompanyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createCompanyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: string, select?: any, include?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, select, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyQueryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(take, skip, where, cursor, orderBy, select, include, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCompanyDto} updateCompanyDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updateCompanyDto: UpdateCompanyDto, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updateCompanyDto, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, rev?: any, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCompanyDto} createCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createCompanyDto: CreateCompanyDto, options?: any): AxiosPromise<Company> {
            return localVarFp.create(createCompanyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: string, select?: any, include?: any, options?: any): AxiosPromise<Company> {
            return localVarFp.find(id, select, include, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: any): AxiosPromise<CompanyQueryResponseDto> {
            return localVarFp.query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCompanyDto} updateCompanyDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updateCompanyDto: UpdateCompanyDto, rev?: any, options?: any): AxiosPromise<Company> {
            return localVarFp.update(id, updateCompanyDto, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public _delete(id: string, rev?: any, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration)._delete(id, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCompanyDto} createCompanyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public create(createCompanyDto: CreateCompanyDto, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).create(createCompanyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public find(id: string, select?: any, include?: any, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).find(id, select, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {any} [where] 
     * @param {any} [cursor] 
     * @param {any} [orderBy] 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {boolean} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCompanyDto} updateCompanyDto 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public update(id: string, updateCompanyDto: UpdateCompanyDto, rev?: any, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).update(id, updateCompanyDto, rev, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAdmin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/is-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isDeveloper: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/is-developer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayloadAuthEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isAdmin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isDeveloper(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isDeveloper(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<PayloadAuthEntity> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAdmin(options?: any): AxiosPromise<boolean> {
            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isDeveloper(options?: any): AxiosPromise<boolean> {
            return localVarFp.isDeveloper(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public isAdmin(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public isDeveloper(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).isDeveloper(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobApi - axios parameter creator
 * @export
 */
export const JobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/job/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createJobDto: CreateJobDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobDto' is not null or undefined
            assertParamExists('create', 'createJobDto', createJobDto)
            const localVarPath = `/api/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: string, select?: any, include?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/job/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobDto} updateJobDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateJobDto: UpdateJobDto, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateJobDto' is not null or undefined
            assertParamExists('update', 'updateJobDto', updateJobDto)
            const localVarPath = `/api/job/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApi - functional programming interface
 * @export
 */
export const JobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createJobDto: CreateJobDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createJobDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: string, select?: any, include?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, select, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobQueryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(take, skip, where, cursor, orderBy, select, include, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobDto} updateJobDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updateJobDto: UpdateJobDto, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updateJobDto, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobApi - factory interface
 * @export
 */
export const JobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, rev?: any, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createJobDto: CreateJobDto, options?: any): AxiosPromise<Job> {
            return localVarFp.create(createJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: string, select?: any, include?: any, options?: any): AxiosPromise<Job> {
            return localVarFp.find(id, select, include, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: any): AxiosPromise<JobQueryResponseDto> {
            return localVarFp.query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobDto} updateJobDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updateJobDto: UpdateJobDto, rev?: any, options?: any): AxiosPromise<Job> {
            return localVarFp.update(id, updateJobDto, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
export class JobApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public _delete(id: string, rev?: any, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration)._delete(id, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateJobDto} createJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public create(createJobDto: CreateJobDto, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).create(createJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public find(id: string, select?: any, include?: any, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).find(id, select, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {any} [where] 
     * @param {any} [cursor] 
     * @param {any} [orderBy] 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {boolean} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateJobDto} updateJobDto 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public update(id: string, updateJobDto: UpdateJobDto, rev?: any, options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).update(id, updateJobDto, rev, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePersonDto} createPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createPersonDto: CreatePersonDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPersonDto' is not null or undefined
            assertParamExists('create', 'createPersonDto', createPersonDto)
            const localVarPath = `/api/person`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: string, select?: any, include?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/person`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updatePersonDto: UpdatePersonDto, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updatePersonDto' is not null or undefined
            assertParamExists('update', 'updatePersonDto', updatePersonDto)
            const localVarPath = `/api/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePersonDto} createPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createPersonDto: CreatePersonDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createPersonDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: string, select?: any, include?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, select, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonQueryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(take, skip, where, cursor, orderBy, select, include, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updatePersonDto: UpdatePersonDto, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updatePersonDto, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, rev?: any, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePersonDto} createPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createPersonDto: CreatePersonDto, options?: any): AxiosPromise<Person> {
            return localVarFp.create(createPersonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: string, select?: any, include?: any, options?: any): AxiosPromise<Person> {
            return localVarFp.find(id, select, include, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: any): AxiosPromise<PersonQueryResponseDto> {
            return localVarFp.query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updatePersonDto: UpdatePersonDto, rev?: any, options?: any): AxiosPromise<Person> {
            return localVarFp.update(id, updatePersonDto, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export class PersonApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public _delete(id: string, rev?: any, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration)._delete(id, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePersonDto} createPersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public create(createPersonDto: CreatePersonDto, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).create(createPersonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public find(id: string, select?: any, include?: any, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).find(id, select, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {any} [where] 
     * @param {any} [cursor] 
     * @param {any} [orderBy] 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {boolean} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdatePersonDto} updatePersonDto 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public update(id: string, updatePersonDto: UpdatePersonDto, rev?: any, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).update(id, updatePersonDto, rev, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/role/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createRoleDto: CreateRoleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleDto' is not null or undefined
            assertParamExists('create', 'createRoleDto', createRoleDto)
            const localVarPath = `/api/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: string, select?: any, include?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/role/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateRoleDto: UpdateRoleDto, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateRoleDto' is not null or undefined
            assertParamExists('update', 'updateRoleDto', updateRoleDto)
            const localVarPath = `/api/role/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createRoleDto: CreateRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createRoleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: string, select?: any, include?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, select, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleQueryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(take, skip, where, cursor, orderBy, select, include, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updateRoleDto: UpdateRoleDto, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updateRoleDto, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, rev?: any, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createRoleDto: CreateRoleDto, options?: any): AxiosPromise<Role> {
            return localVarFp.create(createRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: string, select?: any, include?: any, options?: any): AxiosPromise<Role> {
            return localVarFp.find(id, select, include, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: any): AxiosPromise<RoleQueryResponseDto> {
            return localVarFp.query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updateRoleDto: UpdateRoleDto, rev?: any, options?: any): AxiosPromise<Role> {
            return localVarFp.update(id, updateRoleDto, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public _delete(id: string, rev?: any, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration)._delete(id, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateRoleDto} createRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public create(createRoleDto: CreateRoleDto, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).create(createRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public find(id: string, select?: any, include?: any, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).find(id, select, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {any} [where] 
     * @param {any} [cursor] 
     * @param {any} [orderBy] 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {boolean} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateRoleDto} updateRoleDto 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public update(id: string, updateRoleDto: UpdateRoleDto, rev?: any, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).update(id, updateRoleDto, rev, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/session/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSessionDto} createSessionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createSessionDto: CreateSessionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSessionDto' is not null or undefined
            assertParamExists('create', 'createSessionDto', createSessionDto)
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSessionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: string, select?: any, include?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/session/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSessionDto} updateSessionDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateSessionDto: UpdateSessionDto, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateSessionDto' is not null or undefined
            assertParamExists('update', 'updateSessionDto', updateSessionDto)
            const localVarPath = `/api/session/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSessionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateSessionDto} createSessionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createSessionDto: CreateSessionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createSessionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: string, select?: any, include?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, select, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionQueryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(take, skip, where, cursor, orderBy, select, include, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSessionDto} updateSessionDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updateSessionDto: UpdateSessionDto, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updateSessionDto, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, rev?: any, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSessionDto} createSessionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createSessionDto: CreateSessionDto, options?: any): AxiosPromise<Session> {
            return localVarFp.create(createSessionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: string, select?: any, include?: any, options?: any): AxiosPromise<Session> {
            return localVarFp.find(id, select, include, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: any): AxiosPromise<SessionQueryResponseDto> {
            return localVarFp.query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSessionDto} updateSessionDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updateSessionDto: UpdateSessionDto, rev?: any, options?: any): AxiosPromise<Session> {
            return localVarFp.update(id, updateSessionDto, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public _delete(id: string, rev?: any, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration)._delete(id, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSessionDto} createSessionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public create(createSessionDto: CreateSessionDto, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).create(createSessionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public find(id: string, select?: any, include?: any, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).find(id, select, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {any} [where] 
     * @param {any} [cursor] 
     * @param {any} [orderBy] 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {boolean} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateSessionDto} updateSessionDto 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public update(id: string, updateSessionDto: UpdateSessionDto, rev?: any, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).update(id, updateSessionDto, rev, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createUserDto: CreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('create', 'createUserDto', createUserDto)
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: string, select?: any, include?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserDto} updateUserDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateUserDto: UpdateUserDto, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('update', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createUserDto: CreateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: string, select?: any, include?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, select, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserQueryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(take, skip, where, cursor, orderBy, select, include, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserDto} updateUserDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updateUserDto: UpdateUserDto, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updateUserDto, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, rev?: any, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createUserDto: CreateUserDto, options?: any): AxiosPromise<User> {
            return localVarFp.create(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: string, select?: any, include?: any, options?: any): AxiosPromise<User> {
            return localVarFp.find(id, select, include, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: any): AxiosPromise<UserQueryResponseDto> {
            return localVarFp.query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserDto} updateUserDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updateUserDto: UpdateUserDto, rev?: any, options?: any): AxiosPromise<User> {
            return localVarFp.update(id, updateUserDto, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public _delete(id: string, rev?: any, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration)._delete(id, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public create(createUserDto: CreateUserDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).create(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public find(id: string, select?: any, include?: any, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).find(id, select, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {any} [where] 
     * @param {any} [cursor] 
     * @param {any} [orderBy] 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {boolean} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateUserDto} updateUserDto 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public update(id: string, updateUserDto: UpdateUserDto, rev?: any, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).update(id, updateUserDto, rev, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserRoleApi - axios parameter creator
 * @export
 */
export const UserRoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/user-role/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserRoleDto} createUserRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createUserRoleDto: CreateUserRoleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRoleDto' is not null or undefined
            assertParamExists('create', 'createUserRoleDto', createUserRoleDto)
            const localVarPath = `/api/user-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: string, select?: any, include?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/user-role/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserRoleDto} updateUserRoleDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateUserRoleDto: UpdateUserRoleDto, rev?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateUserRoleDto' is not null or undefined
            assertParamExists('update', 'updateUserRoleDto', updateUserRoleDto)
            const localVarPath = `/api/user-role/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserRoleApi - functional programming interface
 * @export
 */
export const UserRoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserRoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUserRoleDto} createUserRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createUserRoleDto: CreateUserRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createUserRoleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: string, select?: any, include?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, select, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoleQueryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(take, skip, where, cursor, orderBy, select, include, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserRoleDto} updateUserRoleDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updateUserRoleDto: UpdateUserRoleDto, rev?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updateUserRoleDto, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserRoleApi - factory interface
 * @export
 */
export const UserRoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserRoleApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, rev?: any, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserRoleDto} createUserRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createUserRoleDto: CreateUserRoleDto, options?: any): AxiosPromise<UserRole> {
            return localVarFp.create(createUserRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: string, select?: any, include?: any, options?: any): AxiosPromise<UserRole> {
            return localVarFp.find(id, select, include, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {any} [where] 
         * @param {any} [cursor] 
         * @param {any} [orderBy] 
         * @param {any} [select] 
         * @param {any} [include] 
         * @param {boolean} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: any): AxiosPromise<UserRoleQueryResponseDto> {
            return localVarFp.query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateUserRoleDto} updateUserRoleDto 
         * @param {any} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updateUserRoleDto: UpdateUserRoleDto, rev?: any, options?: any): AxiosPromise<UserRole> {
            return localVarFp.update(id, updateUserRoleDto, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserRoleApi - object-oriented interface
 * @export
 * @class UserRoleApi
 * @extends {BaseAPI}
 */
export class UserRoleApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRoleApi
     */
    public _delete(id: string, rev?: any, options?: AxiosRequestConfig) {
        return UserRoleApiFp(this.configuration)._delete(id, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserRoleDto} createUserRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRoleApi
     */
    public create(createUserRoleDto: CreateUserRoleDto, options?: AxiosRequestConfig) {
        return UserRoleApiFp(this.configuration).create(createUserRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRoleApi
     */
    public find(id: string, select?: any, include?: any, options?: AxiosRequestConfig) {
        return UserRoleApiFp(this.configuration).find(id, select, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {any} [where] 
     * @param {any} [cursor] 
     * @param {any} [orderBy] 
     * @param {any} [select] 
     * @param {any} [include] 
     * @param {boolean} [count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRoleApi
     */
    public query(take?: number, skip?: number, where?: any, cursor?: any, orderBy?: any, select?: any, include?: any, count?: boolean, options?: AxiosRequestConfig) {
        return UserRoleApiFp(this.configuration).query(take, skip, where, cursor, orderBy, select, include, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateUserRoleDto} updateUserRoleDto 
     * @param {any} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRoleApi
     */
    public update(id: string, updateUserRoleDto: UpdateUserRoleDto, rev?: any, options?: AxiosRequestConfig) {
        return UserRoleApiFp(this.configuration).update(id, updateUserRoleDto, rev, options).then((request) => request(this.axios, this.basePath));
    }
}


